name: Deploy to DockerHub and restart on a server
on:
  push:
    branches: [master]
    paths:
      - 'docker-rest-api/**'
      - '.github/workflows/09-publish-to-docker.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: docker-rest-api

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          cache: maven

      - name: Build with Maven
        run: mvn clean install

      - name: Copy the JAR to hello.jar
        run: |
          cd target
          cp hello*.jar hello.jar
          cd ..

      - name: Upload JAR and Dockerfile to GitHub Actions Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: java-app-for-container
          path: |
            docker-rest-api/target/hello.jar
            docker-rest-api/Dockerfile

  upload-to-dockerhub:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: java-app-for-container
          path: docker-rest-api

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx (for caching)
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: docker-rest-api
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/hello-java:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Restart the container on the server
    needs: upload-to-dockerhub
    runs-on: ubuntu-latest
    steps:
      - name: Restart the container on the server over SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # Run docker stop commands but don't fail if the container is not running
          # Then start the container
          script: |
            cd ${{ secrets.SSH_WORKING_TARGET_PATH }}
            sudo docker stop hello-java || true
            sudo docker rm hello-java || true
            sudo docker run -d -p 8080:8080 --name hello-java ${{secrets.DOCKERHUB_USERNAME}}/hello-java:latest
